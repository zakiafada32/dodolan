// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	category "github.com/zakiafada32/retail/business/category"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateNew provides a mock function with given fields: _a0
func (_m *Service) CreateNew(_a0 category.Category) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(category.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Service) FindAll() ([]category.Category, error) {
	ret := _m.Called()

	var r0 []category.Category
	if rf, ok := ret.Get(0).(func() []category.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *Service) FindById(id uint32) (category.Category, error) {
	ret := _m.Called(id)

	var r0 category.Category
	if rf, ok := ret.Get(0).(func(uint32) category.Category); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(category.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name, description
func (_m *Service) Update(id uint32, name string, description string) (category.Category, error) {
	ret := _m.Called(id, name, description)

	var r0 category.Category
	if rf, ok := ret.Get(0).(func(uint32, string, string) category.Category); ok {
		r0 = rf(id, name, description)
	} else {
		r0 = ret.Get(0).(category.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, string, string) error); ok {
		r1 = rf(id, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
