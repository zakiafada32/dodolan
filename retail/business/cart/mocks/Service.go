// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cart "github.com/zakiafada32/retail/business/cart"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: userId, paymentId, courier
func (_m *Service) Checkout(userId string, paymentId uint32, courier uint32) error {
	ret := _m.Called(userId, paymentId, courier)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32) error); ok {
		r0 = rf(userId, paymentId, courier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: userId, productsId
func (_m *Service) DeleteCartItem(userId string, productsId []uint32) error {
	ret := _m.Called(userId, productsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []uint32) error); ok {
		r0 = rf(userId, productsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: userId
func (_m *Service) FindAll(userId string) (cart.Cart, error) {
	ret := _m.Called(userId)

	var r0 cart.Cart
	if rf, ok := ret.Get(0).(func(string) cart.Cart); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(cart.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, cartItem
func (_m *Service) Update(userId string, cartItem cart.CartItem) error {
	ret := _m.Called(userId, cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, cart.CartItem) error); ok {
		r0 = rf(userId, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
