// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cart "github.com/zakiafada32/retail/business/cart"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: userId, paymentId, courier, _a3
func (_m *Repository) Checkout(userId string, paymentId uint32, courier uint32, _a3 cart.Cart) error {
	ret := _m.Called(userId, paymentId, courier, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32, cart.Cart) error); ok {
		r0 = rf(userId, paymentId, courier, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: userId, productsId
func (_m *Repository) DeleteCartItem(userId string, productsId []uint32) error {
	ret := _m.Called(userId, productsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []uint32) error); ok {
		r0 = rf(userId, productsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: userId
func (_m *Repository) FindAll(userId string) ([]cart.CartItemAtt, error) {
	ret := _m.Called(userId)

	var r0 []cart.CartItemAtt
	if rf, ok := ret.Get(0).(func(string) []cart.CartItemAtt); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cart.CartItemAtt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, productId, quantity
func (_m *Repository) Update(userId string, productId uint32, quantity uint32) error {
	ret := _m.Called(userId, productId, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32) error); ok {
		r0 = rf(userId, productId, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
