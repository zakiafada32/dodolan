// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	courier "github.com/zakiafada32/retail/business/courier"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateNew provides a mock function with given fields: courierProvider
func (_m *Repository) CreateNew(courierProvider courier.CourierProvider) error {
	ret := _m.Called(courierProvider)

	var r0 error
	if rf, ok := ret.Get(0).(func(courier.CourierProvider) error); ok {
		r0 = rf(courierProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]courier.CourierProvider, error) {
	ret := _m.Called()

	var r0 []courier.CourierProvider
	if rf, ok := ret.Get(0).(func() []courier.CourierProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]courier.CourierProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name, description
func (_m *Repository) Update(id uint32, name string, description string) (courier.CourierProvider, error) {
	ret := _m.Called(id, name, description)

	var r0 courier.CourierProvider
	if rf, ok := ret.Get(0).(func(uint32, string, string) courier.CourierProvider); ok {
		r0 = rf(id, name, description)
	} else {
		r0 = ret.Get(0).(courier.CourierProvider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, string, string) error); ok {
		r1 = rf(id, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
