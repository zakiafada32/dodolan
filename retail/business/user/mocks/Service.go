// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	user "github.com/zakiafada32/retail/business/user"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateNew provides a mock function with given fields: _a0
func (_m *Service) CreateNew(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields: id
func (_m *Service) GetCurrent(id string) (user.User, error) {
	ret := _m.Called(id)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name, address
func (_m *Service) Update(id string, name string, address string) (user.User, error) {
	ret := _m.Called(id, name, address)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(string, string, string) user.User); ok {
		r0 = rf(id, name, address)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
